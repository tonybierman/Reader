@page "/"
@page "/news/{Slug}"
@using Reader.Shared
@inject HttpClient Http

<style>
    .single-feed {
        margin:5px;
    }
</style>
<PageTitle>@m_title</PageTitle>

<h1>@m_title</h1>

@if (m_feeds == null)
{
    <div style="display:flex; gap:10px; justify-content:center; align-items:center">
                <div class="spinner-border" role="status"></div>
                loading...
    </div>
}
@*else if (m_feeds.Length == 0)
{
    <div style="display:flex; gap:10px; justify-content:center; align-items:center">
        Unavaiable
    </div>
}*@
else
{
    @foreach (var feed in m_feeds)
    {
        <div class="single-feed">
            @if (feed == null)
            {
                <div>Loading...</div>
            }
            else if (feed.Id == Guid.Empty)
            {
                
            }
            else
            {
                <SingleFeed News="feed"/>
            }
        </div>
    }
}

@code {
    [Parameter] public string? Slug { get; set; }
    private string m_title;
    private Feed[]? m_feeds;
    Dictionary<string, string> m_titles = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        m_titles.Add("news", "Latest Headlines");
        m_titles.Add("editorial", "Editorials");
        m_titles.Add("sports", "Sports");
        m_titles.Add("culture", "Cultural News");
        m_titles.Add("world", "World News");
        m_titles.Add("politics", "Politics");
        m_titles.Add("tech", "Tech News");
        m_titles.Add("business", "Business News");
        m_titles.Add("finance", "Financial News");
    }

    protected override async void OnParametersSet()
    {
        m_feeds = null;
        Slug = Slug ?? "news";

        if (m_titles.ContainsKey(Slug))
            m_title = m_titles[Slug];
        else
            m_title = m_titles["news"];

        StateHasChanged();

        m_feeds = await Http.GetFromJsonAsync<Feed[]>($"Feeds?cat={Slug}");
        if (m_feeds != null)
        {
            for (int x = 0; x < m_feeds.Length; x++)
            {
                try
                {
                    m_feeds[x] = await Http.GetFromJsonAsync<Feed>($"SingleFeed?url={m_feeds[x].Url}&length=18");
                }
                catch
                {
                    m_feeds[x] = new Feed() { Id = Guid.Empty }; 
                }
                finally
                {
                    StateHasChanged();
                }
            }
        }
    }
}
